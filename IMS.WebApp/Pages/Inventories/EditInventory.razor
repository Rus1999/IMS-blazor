@* the parameter name is case-insensitive and must speicify type to make it convert the string to integer*@
@page "/editinventory/{InvId:int}" 

@inject NavigationManager NavigationManager
@inject IViewInventoryByIdUseCase ViewInventoryByIdUseCase
@inject IEditInventoryUseCase EditInventoryUseCaes

@attribute [Authorize(Policy = "Inventory")]

<h3>EditInventory</h3>
<br />

<EditForm Model="inventory" OnValidSubmit="SaveInventory">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="name">Inventory Name</label>
        <InputText id="name"
        @bind-Value="inventory.InventoryName"
                   class="form-control">
        </InputText>
    </div>

    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity"
        @bind-Value="inventory.Quantity"
                     class="form-control">
        </InputNumber>
    </div>

    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price"
        @bind-Value="inventory.Price"
                     class="form-control">
        </InputNumber>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    [Parameter] // to be able to pass the intId from @page to this property
    public int InvId { get; set; }

    private Inventory inventory = new Inventory();

    protected override async Task OnParametersSetAsync()
    {
        this.inventory = await ViewInventoryByIdUseCase.ExecuteAsync(this.InvId);
    }

    private async Task SaveInventory()
    {
        await EditInventoryUseCaes.ExecuteAsync(this.inventory);
        NavigationManager.NavigateTo("/inventories");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/inventories");
    }
}
