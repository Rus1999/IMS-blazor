@page "/inventories"
@using static IMS.WebApp.Controls.Common.AutoCompleteComponent

@inject NavigationManager NavigationManager
@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase

<h3>InventoryList</h3>
<br />
<SearchInventoryComponent
    OnSearchInventory="OnInventorySearch"    
></SearchInventoryComponent>

@* pass the SearchTerm in to this component by parameter(property) *@
<InventoryListComponent
    SearchTerm="@searchTerm"> @* when rerendered will pass the searchTerm *@
</InventoryListComponent>
<br />

<button
    type="button"
    class="btn btn-primary"
    @onclick="AddInventory"
>
    Add Inventory
</button>

<p>
    <IMS.WebApp.Controls.Common.AutoCompleteComponent 
        Label="Inventory"
        SearchFunction="SearchInventory"
        OnItemSelected="OnItemSelected">
    </IMS.WebApp.Controls.Common.AutoCompleteComponent>
    <br />
    @selectedItem?.Name
</p>

@code {
    private ItemViewModel? selectedItem = null;

    private string searchTerm = string.Empty;

    // when trigger the page will rerendered
    private void OnInventorySearch(string searchTerm) // event handler
    {
        this.searchTerm = searchTerm;
    }

    private void AddInventory()
    {
        // navigate to AddInventory page
        NavigationManager.NavigateTo("/addinventory");
    }

    private List<ItemViewModel>? SearchInventory(string name)
    {
        var list = ViewInventoriesByNameUseCase.ExecuteAsync(name).GetAwaiter().GetResult();

        if (list == null) return null;

        return list.Select(x => new ItemViewModel { Id = x.InventoryId, Name = x.InventoryName })?.ToList();
    }

    private void OnItemSelected(ItemViewModel item)
    {
        this.selectedItem = item;
    }
}
